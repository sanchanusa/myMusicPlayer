/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package titanplayer;
import com.titan.bll.*;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Brandon
 */
public class PlayerGUI extends javax.swing.JFrame {
    private File file, fileName;
    Library myLibray = new Library();
    List playlistCollection = new ArrayList();
    private String openedFile, title, author;
    Library fp;
    private Long duration;
    private int rowTableAdding, rowTablePlaying, columnTableAdding;
    private double remainder;
    private int minutes;
    Library addLibrary = new Library();
    
    Player myPlayList = new Player();
    
    Player player = new Player();
    
    Playlist myPlaylist = new Playlist();
    
    Playlist myPlaylistToTest = new Playlist();
    

    public PlayerGUI() {
        
     // Playlist myPlayList = new Playlist();   
        
        initComponents();
        loginFrame.setVisible(rootPaneCheckingEnabled);
        
        User user = new User();
        user.setUsername(usernameText.getText());
        
        if(user.getUsername().equalsIgnoreCase("TEST")){
            loginFrame.setVisible(false);
        }else{
           // System.exit(0);
        }
        
        System.out.print(user.getUsername());
        //if(verified){
       // }else{
       //     System.exit(0);
       // }
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSongChooser = new javax.swing.JFileChooser();
        loginFrame = new javax.swing.JFrame();
        usernameText = new javax.swing.JTextField();
        loginCancelBtn = new javax.swing.JButton();
        loginLoginBtn = new javax.swing.JButton();
        emailText = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordWindowTitle = new javax.swing.JLabel();
        jPanelMain = new javax.swing.JPanel();
        jPanelControls = new javax.swing.JPanel();
        jButtonStop = new javax.swing.JButton();
        jButtonPlay = new javax.swing.JButton();
        jButtonBackward = new javax.swing.JButton();
        jButtonFoward = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jSongTitle = new javax.swing.JLabel();
        jEndLabel = new javax.swing.JLabel();
        jStartLabel = new javax.swing.JLabel();
        jScrollJTree = new javax.swing.JScrollPane();
        jTreeTitanPlayer = new javax.swing.JTree();
        jScrollTable = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuLoadSong = new javax.swing.JMenuItem();
        jMenuDeleteSong = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenuPlaylist = new javax.swing.JMenu();
        jMenuPlaylistCreate = new javax.swing.JMenuItem();
        jMenuPlaylistDelete = new javax.swing.JMenuItem();
        jMenuPlaylistAddSong = new javax.swing.JMenuItem();
        jMenuPlayListDeleteSong = new javax.swing.JMenuItem();

        loginFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        loginFrame.setAlwaysOnTop(true);
        loginFrame.setAutoRequestFocus(false);
        loginFrame.setBounds(new java.awt.Rectangle(0, 0, 250, 300));
        loginFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loginFrame.setResizable(false);

        loginCancelBtn.setText("Cancel");
        loginCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginCancelBtnActionPerformed(evt);
            }
        });

        loginLoginBtn.setText("Login");

        passwordLabel.setText("Password:");

        emailLabel.setText("E-mail:");

        usernameLabel.setText("Username:");

        passwordWindowTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        passwordWindowTitle.setText("TitanPlayer Music Player Login");

        javax.swing.GroupLayout loginFrameLayout = new javax.swing.GroupLayout(loginFrame.getContentPane());
        loginFrame.getContentPane().setLayout(loginFrameLayout);
        loginFrameLayout.setHorizontalGroup(
            loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginFrameLayout.createSequentialGroup()
                        .addComponent(loginCancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginLoginBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(passwordTextField)
                    .addComponent(emailText)
                    .addComponent(passwordWindowTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(usernameText)
                    .addGroup(loginFrameLayout.createSequentialGroup()
                        .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordLabel)
                            .addComponent(emailLabel)
                            .addComponent(usernameLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        loginFrameLayout.setVerticalGroup(
            loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginFrameLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(passwordWindowTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(usernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emailLabel)
                .addGap(5, 5, 5)
                .addComponent(emailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(loginFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginCancelBtn)
                    .addComponent(loginLoginBtn))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonPlay.setText("Play");
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });

        jButtonBackward.setText("<");

        jButtonFoward.setText(">");

        javax.swing.GroupLayout jPanelControlsLayout = new javax.swing.GroupLayout(jPanelControls);
        jPanelControls.setLayout(jPanelControlsLayout);
        jPanelControlsLayout.setHorizontalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControlsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBackward, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonFoward, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelControlsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonBackward, jButtonFoward, jButtonPlay, jButtonStop});

        jPanelControlsLayout.setVerticalGroup(
            jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelControlsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControlsLayout.createSequentialGroup()
                        .addComponent(jButtonPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonStop)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControlsLayout.createSequentialGroup()
                        .addComponent(jButtonFoward)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelControlsLayout.createSequentialGroup()
                        .addComponent(jButtonBackward)
                        .addGap(34, 34, 34))))
        );

        jPanelControlsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonBackward, jButtonFoward, jButtonPlay, jButtonStop});

        jSongTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jSongTitle.setText("Song Title");
        jSongTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jEndLabel.setText("0:00");

        jStartLabel.setText("0:00");

        jScrollJTree.setViewportView(jTreeTitanPlayer);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title", "Artist", "Length"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollTable.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(2).setMinWidth(55);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(55);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(55);

        javax.swing.GroupLayout jPanelMainLayout = new javax.swing.GroupLayout(jPanelMain);
        jPanelMain.setLayout(jPanelMainLayout);
        jPanelMainLayout.setHorizontalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSongTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addComponent(jStartLabel)
                        .addGap(196, 196, 196)
                        .addComponent(jPanelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jEndLabel))
                    .addGroup(jPanelMainLayout.createSequentialGroup()
                        .addComponent(jScrollJTree, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelMainLayout.setVerticalGroup(
            jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollJTree, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                    .addComponent(jScrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSongTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jStartLabel)
                        .addComponent(jEndLabel))
                    .addComponent(jPanelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jMenuFile.setText("File");

        jMenuLoadSong.setText("Load Song");
        jMenuLoadSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLoadSongActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuLoadSong);

        jMenuDeleteSong.setText("Delete Song");
        jMenuDeleteSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDeleteSongActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuDeleteSong);

        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuExit);

        jMenuBar1.add(jMenuFile);

        jMenuPlaylist.setText("Playlist");

        jMenuPlaylistCreate.setText("Create Playlist");
        jMenuPlaylistCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlaylistCreateActionPerformed(evt);
            }
        });
        jMenuPlaylist.add(jMenuPlaylistCreate);

        jMenuPlaylistDelete.setText("Delete Playlist");
        jMenuPlaylistDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlaylistDeleteActionPerformed(evt);
            }
        });
        jMenuPlaylist.add(jMenuPlaylistDelete);

        jMenuPlaylistAddSong.setText("Add Song");
        jMenuPlaylistAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPlaylistAddSongActionPerformed(evt);
            }
        });
        jMenuPlaylist.add(jMenuPlaylistAddSong);

        jMenuPlayListDeleteSong.setText("Delete Song");
        jMenuPlaylist.add(jMenuPlayListDeleteSong);

        jMenuBar1.add(jMenuPlaylist);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed


        
        if (addLibrary.songCount() > 0){

            if (player.isPlaying() == false){
                // If the player is playing, there is nothing else to do here...
           
                // Ok, over here I am taking just the first song (for test) in order to 
                // show the properties. of course we probably need a loop to open and play
                // all the songs in the playlist...
        
                String titleTest = addLibrary.songs.get(0).getTitle();
                String authorTest = addLibrary.songs.get(0).getArtist();
                String durationTest = addLibrary.songs.get(0).getSongDuration();
                String pathTest = addLibrary.songs.get(0).getSongPath();
        
                jSongTitle.setText(title);
                jEndLabel.setText(durationTest);
        
                // Over here I am creating this temporary PlayList to test this step
                // I am not sure how to get the PlayList from a file :(
                myPlaylistToTest.addSong(new Song(titleTest, authorTest, durationTest, pathTest));
                
                player.loadPlaylist(myPlaylistToTest);
        
                player.playSong();
        
            }
       
        }
        
        /*
        // ORIGINAL CODE
        Playlist myPlaylist = new Playlist(JOptionPane.showInputDialog("Playlist name?"));
        myPlaylist.addSong(new Song("Rock Star", "John Smith", "5.32", "/Test.mp3"));
        Player player = new Player();
        player.loadPlaylist(myPlaylist);
        player.playSong();
        */ 
        
    }//GEN-LAST:event_jButtonPlayActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
      
        
        player.stopSong();
        
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jMenuLoadSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLoadSongActionPerformed
                JFileChooser songChooser = new JFileChooser(); 
                songChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int result = songChooser.showOpenDialog(this); 

        if (result != JFileChooser.CANCEL_OPTION) 
            file = songChooser.getSelectedFile(); 
        else 
            file = null; 
    }//GEN-LAST:event_jMenuLoadSongActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuDeleteSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDeleteSongActionPerformed
        
    }//GEN-LAST:event_jMenuDeleteSongActionPerformed

    private void jMenuPlaylistCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPlaylistCreateActionPerformed
// Here we create the PlayList only if there are songs added in the jTable...
        
        if (addLibrary.songCount() > 0){
            System.out.println(addLibrary.songCount());
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("c:"));
        fc.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith(".pls") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }
            public String getDescription() {
                return "Play List files";
            }
        });
        
        int actionDialog = fc.showSaveDialog(this);
        if ( actionDialog == JFileChooser.APPROVE_OPTION )
            {
                File fileNameOld = new File( fc.getSelectedFile() + "");
                File fileName = new File( fc.getSelectedFile() + "");
                if (fileName != null)
                    {
                       fileName = new File( fc.getSelectedFile() + ".pls"); 
                        
                       
                        if (fileName.exists())
                            {
                                
                                actionDialog = JOptionPane.showConfirmDialog(this, "Replace existing file?");
                                
                                while (actionDialog == JOptionPane.NO_OPTION)
                                    {
                                        actionDialog = fc.showSaveDialog(this);
                                        if (actionDialog == JFileChooser.APPROVE_OPTION)
                                            {
                                                fileName = new File(fc.getSelectedFile( ) + "" );
                                                
                                                   if (fileName.exists())
                                                    {
                                                        actionDialog = JOptionPane.showConfirmDialog(this, "Replace existing file?");

                                                    }
                                            }
                                    
                         FileWriter fstream = null;
                try {
                    fstream = new FileWriter(fileName);
                    BufferedWriter out = new BufferedWriter(fstream);
                    for (int i=0; i < addLibrary.songCount(); i++){
                    out.write(addLibrary.songs.get(i).getTitle() + ", " + addLibrary.songs.get(i).getArtist() + ", " + addLibrary.songs.get(i).getSongDuration() + ", " + addLibrary.songs.get(i).getSongPath());
                    out.newLine();
                    }
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                finally {
                    try {
                        fstream.close();
                        } catch (IOException ex) {
                            Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                }
           }                
    }
                if (fileNameOld.exists())
                            {
                                actionDialog = JOptionPane.showConfirmDialog(this, "Replace existing file?");
                                
                                fileName = fileNameOld;
                                
                                while (actionDialog == JOptionPane.NO_OPTION)
                                    {
                                        actionDialog = fc.showSaveDialog(this);
                                        if (actionDialog == JFileChooser.APPROVE_OPTION)
                                            {
                                                fileName = new File(fc.getSelectedFile( ) + "" );
                                                
                                                   if (fileName.exists())
                                                    {
                                                        actionDialog = JOptionPane.showConfirmDialog(this, "Replace existing file?");

                                                    }
                                            }
               
                                    }                
            }        
                       
            FileWriter fstream = null;
                try {
                    fstream = new FileWriter(fileName);
                    BufferedWriter out = new BufferedWriter(fstream);
                    for (int i=0; i < addLibrary.songCount(); i++){
                    out.write(addLibrary.songs.get(i).getTitle() + ", " + addLibrary.songs.get(i).getArtist() + ", " + addLibrary.songs.get(i).getSongDuration() + ", " + addLibrary.songs.get(i).getSongPath());
                    out.newLine();
                    }
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                finally {
                    try {
                        fstream.close();
                        } catch (IOException ex) {
                            Logger.getLogger(PlayerGUI.class.getName()).log(Level.SEVERE, null, ex);
                        } 
                }
                    }
            }
        
        }
        
        
        
        /* ORIGINAL CODE
        Playlist myPlaylist = new Playlist(JOptionPane.showInputDialog("Playlist name?"));
        myPlaylist.addSong(new Song("Rock Star", "John Smith", "5.32", "/Test.mp3"));
        Player player = new Player();
        player.loadPlaylist(myPlaylist);
        player.playSong();
        * 
        */
                                          
    }//GEN-LAST:event_jMenuPlaylistCreateActionPerformed

    private void loginCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginCancelBtnActionPerformed
            System.exit(0);
    }//GEN-LAST:event_loginCancelBtnActionPerformed

    private void jMenuPlaylistAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPlaylistAddSongActionPerformed
// Here we add songs to the jTable.
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("c:"));
        fc.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith(".mp3") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }
            public String getDescription() {
                return "Mp3 files";
            }
        });
        int returnVal = fc.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
        	if (fc.getSelectedFile()!=null) {
        
                    openedFile = fc.getSelectedFile().getAbsolutePath();
                    
                }
        }
                    
        if (returnVal == JFileChooser.APPROVE_OPTION){
        
        // ************* This code get the properties of the song ********************
        File file = new File(openedFile);
        
        System.out.println(file);
        
        AudioFileFormat baseFileFormat = null;
        
        try {
            baseFileFormat = AudioSystem.getAudioFileFormat(file);
        } catch (UnsupportedAudioFileException ex) {
            // Here we have to handle the Exceptions
            // Logger.getLogger(TitanPlayer.class.getName()).log(Level.SEVERE, null, ex);
            
        } catch (IOException ex) {
            // Logger.getLogger(TitanPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        Map properties = baseFileFormat.properties();
        duration = (Long) properties.get("duration");
        
        title = (String) properties.get("title");
        
        author = (String) properties.get("author");
        
        jTable1.setValueAt(title, rowTableAdding, columnTableAdding);
        
        columnTableAdding++;
        
        jTable1.setValueAt(author, rowTableAdding, columnTableAdding);
        
        columnTableAdding++;
        
        remainder = (double) ((duration/1000000)%60)/100;
        
        minutes = (int) ((duration/1000000)/60);
        
        DecimalFormat df = new DecimalFormat( "#########0.00");
        String formattedValue = df.format(minutes + remainder);
        
        jTable1.setValueAt(formattedValue, rowTableAdding, columnTableAdding);
        
        rowTableAdding++;
        columnTableAdding = 0;
        
        addLibrary.addSong(new Song(title, author, formattedValue, fc.getDescription(file)));

        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuPlaylistAddSongActionPerformed

    private void jMenuPlaylistDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPlaylistDeleteActionPerformed
// Here we show all the files (*.pls) so the user can erase only the right one...
      
        JFileChooser fc = new JFileChooser();
        
        fc.setCurrentDirectory(new File("c:"));
        fc.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                if (f.getName().endsWith(".pls") || f.isDirectory()) {
                    return true;
                } else {
                    return false;
                }
            }
            public String getDescription() {
                return "Play List files";
            }
        });
        
        int returnVal = fc.showDialog(jPanelMain, "Delete");
        
        if(returnVal == JFileChooser.APPROVE_OPTION) {
        openedFile = fc.getSelectedFile().getAbsolutePath();    
        returnVal = JOptionPane.showConfirmDialog(this, "Do you want to delete this Playlist?");
                     
        if (returnVal == JFileChooser.APPROVE_OPTION )
            {
                fileName = new File( fc.getSelectedFile() + ".pls");
                
                if (fileName != null)
                    { 
                              while (returnVal == JOptionPane.CANCEL_OPTION)
                                    {
                                        returnVal = fc.showDialog(jPanelMain, "Delete");
                                        // returnVal = JOptionPane.showConfirmDialog(this, "DO you want to delete this Playlist?");
                                        
                                        if (returnVal == JFileChooser.APPROVE_OPTION)
                                            {
                                               fc.getSelectedFile().delete();
                                            }
                                    }
                    }
                 
                fc.getSelectedFile().delete();
                }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuPlaylistDeleteActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PlayerGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailText;
    private javax.swing.JButton jButtonBackward;
    private javax.swing.JButton jButtonFoward;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JLabel jEndLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuDeleteSong;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuLoadSong;
    private javax.swing.JMenuItem jMenuPlayListDeleteSong;
    private javax.swing.JMenu jMenuPlaylist;
    private javax.swing.JMenuItem jMenuPlaylistAddSong;
    private javax.swing.JMenuItem jMenuPlaylistCreate;
    private javax.swing.JMenuItem jMenuPlaylistDelete;
    private javax.swing.JPanel jPanelControls;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollJTree;
    private javax.swing.JScrollPane jScrollTable;
    private javax.swing.JFileChooser jSongChooser;
    private javax.swing.JLabel jSongTitle;
    private javax.swing.JLabel jStartLabel;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTreeTitanPlayer;
    private javax.swing.JButton loginCancelBtn;
    private javax.swing.JFrame loginFrame;
    private javax.swing.JButton loginLoginBtn;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel passwordWindowTitle;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameText;
    // End of variables declaration//GEN-END:variables

}
